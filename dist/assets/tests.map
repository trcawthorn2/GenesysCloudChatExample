{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","chatExample/tests/app.lint-test.js","chatExample/tests/helpers/ember-power-select.js","chatExample/tests/integration/components/groups-overview/component-test.js","chatExample/tests/test-helper.js","chatExample/tests/tests.lint-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('chatExample/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n7:1 - Expected indentation of 4 spaces but found 2. (indent)\\n8:1 - Expected indentation of 4 spaces but found 2. (indent)\\n9:1 - Expected indentation of 4 spaces but found 2. (indent)');\n  });\n\n  QUnit.test('breakpoints.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'breakpoints.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n2:1 - Expected indentation of 4 spaces but found 2. (indent)\\n3:1 - Expected indentation of 4 spaces but found 2. (indent)\\n4:1 - Expected indentation of 4 spaces but found 2. (indent)');\n  });\n\n  QUnit.test('components/groups-overview/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/groups-overview/component.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n8:18 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n9:19 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n11:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n13:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n14:20 - Don\\'t use observers if possible (ember/no-observers)\\n14:90 - Missing space before opening brace. (space-before-blocks)\\n24:17 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)');\n  });\n\n  QUnit.test('components/link-to-cell/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/link-to-cell/component.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n5:12 - Use import { alias } from \\'@ember/object/computed\\'; instead of using Ember.computed.alias (ember/new-module-imports)\\n6:11 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n7:35 - Infix operators must be spaced. (space-infix-ops)\\n9:13 - Use import { alias } from \\'@ember/object/computed\\'; instead of using Ember.computed.alias (ember/new-module-imports)\\n11:28 - Missing space before opening brace. (space-before-blocks)\\n12:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n5:1 - Expected indentation of 4 spaces but found 2. (indent)\\n6:1 - Expected indentation of 4 spaces but found 2. (indent)\\n10:1 - Expected indentation of 4 spaces but found 2. (indent)');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n5:11 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n6:11 - Missing space before opening brace. (space-before-blocks)');\n  });\n\n  QUnit.test('services/auth-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/auth-service.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n4:36 - Missing space before opening brace. (space-before-blocks)\\n5:15 - Infix operators must be spaced. (space-infix-ops)\\n9:24 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n10:27 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n11:22 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n13:5 - Call this._super(...arguments) in init hook (ember/require-super-in-init)\\n13:11 - Missing space before opening brace. (space-before-blocks)\\n22:1 - Trailing spaces not allowed. (no-trailing-spaces)\\n24:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/browser-storage-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/browser-storage-service.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)');\n  });\n\n  QUnit.test('services/group-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/group-service.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n5:12 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n6:18 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n7:22 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n8:24 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n9:27 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n10:26 - Missing space before opening brace. (space-before-blocks)\\n11:9 - Expected space(s) after \"if\". (keyword-spacing)\\n11:46 - Missing space before opening brace. (space-before-blocks)\\n15:57 - Infix operators must be spaced. (space-infix-ops)\\n15:134 - Unnecessarily quoted property \\'Authorization\\' found. (quote-props)\\n15:160 - Infix operators must be spaced. (space-infix-ops)\\n17:6 - Unexpected trailing comma. (comma-dangle)');\n  });\n\n  QUnit.test('services/region-locator-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/region-locator-service.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n7:26 - Unexpected trailing comma. (comma-dangle)\\n12:28 - Unexpected trailing comma. (comma-dangle)\\n17:28 - Unexpected trailing comma. (comma-dangle)\\n22:33 - Unexpected trailing comma. (comma-dangle)\\n27:33 - Unexpected trailing comma. (comma-dangle)\\n32:28 - Unexpected trailing comma. (comma-dangle)\\n37:31 - Unexpected trailing comma. (comma-dangle)\\n48:28 - Unexpected trailing comma. (comma-dangle)\\n53:31 - Unexpected trailing comma. (comma-dangle)\\n58:29 - Unexpected trailing comma. (comma-dangle)\\n63:36 - Unexpected trailing comma. (comma-dangle)\\n68:36 - Unexpected trailing comma. (comma-dangle)\\n93:6 - Unexpected trailing comma. (comma-dangle)');\n  });\n\n  QUnit.test('services/rest-client-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/rest-client-service.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)');\n  });\n\n  QUnit.test('services/url-state-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/url-state-service.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n5:28 - Use import { inject } from \\'@ember/service\\'; instead of using Ember.inject.service (ember/new-module-imports)\\n6:27 - Missing space before opening brace. (space-before-blocks)\\n9:28 - Missing space before opening brace. (space-before-blocks)');\n  });\n});","define('chatExample/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, { until: '1.11.0', id: `ember-power-select-test-support-${name}` }));\n\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('chatExample/tests/integration/components/groups-overview/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | groups-overview', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"/WEpnjCb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"groups-overview\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Y7FcXxgu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"groups-overview\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('chatExample/tests/test-helper', ['chatExample/app', 'chatExample/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('chatExample/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/groups-overview/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/groups-overview/component-test.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)\\n7:1 - Expected indentation of 4 spaces but found 2. (indent)\\n9:1 - Expected indentation of 4 spaces but found 2. (indent)\\n13:1 - Expected indentation of 8 spaces but found 4. (indent)\\n15:1 - Expected indentation of 8 spaces but found 4. (indent)\\n17:1 - Expected indentation of 8 spaces but found 4. (indent)\\n18:1 - Expected indentation of 8 spaces but found 4. (indent)\\n24:1 - Expected indentation of 8 spaces but found 4. (indent)\\n25:1 - Expected indentation of 4 spaces but found 2. (indent)');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n1:1 - Definition for rule \\'ember/require-return-from-computed\\' was not found (ember/require-return-from-computed)');\n  });\n});","define('chatExample/config/environment', [], function() {\n  var prefix = 'chatExample';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('chatExample/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}